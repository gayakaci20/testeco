#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

function generateSecureSecret(length = 64) {
  return crypto.randomBytes(length).toString('hex');
}

async function fixProductionConfig() {
  console.log('üîß Correction de la configuration de production');
  console.log('===============================================\n');

  // 1. Obtenir les informations de l'utilisateur
  console.log('üìã Informations requises :');
  console.log('');
  
  const domain = await question('üåê Votre domaine (ex: ecodeli.pro) : ');
  if (!domain) {
    console.log('‚ùå Domaine requis pour la configuration');
    process.exit(1);
  }

  const protocol = domain.includes('localhost') ? 'http' : 'https';
  const baseUrl = `${protocol}://${domain}`;
  
  console.log(`‚úÖ URL de base configur√©e : ${baseUrl}`);

  // 2. G√©n√©rer des secrets s√©curis√©s
  console.log('\nüîê G√©n√©ration des secrets s√©curis√©s...');
  
  const jwtSecret = generateSecureSecret(32);
  const nextAuthSecret = generateSecureSecret(32);
  
  console.log('‚úÖ JWT_SECRET g√©n√©r√©');
  console.log('‚úÖ NEXTAUTH_SECRET g√©n√©r√©');

  // 3. Mise √† jour du docker-compose.yml
  console.log('\nüìù Mise √† jour du docker-compose.yml...');
  
  const dockerComposePath = path.join(process.cwd(), 'docker-compose.yml');
  
  if (!fs.existsSync(dockerComposePath)) {
    console.log('‚ùå docker-compose.yml non trouv√©');
    process.exit(1);
  }

  // Backup du fichier original
  const backupPath = `${dockerComposePath}.backup-${Date.now()}`;
  fs.copyFileSync(dockerComposePath, backupPath);
  console.log(`üì¶ Backup cr√©√© : ${backupPath}`);

  // Lire et modifier le contenu
  let dockerComposeContent = fs.readFileSync(dockerComposePath, 'utf8');
  
  // Remplacer les variables d'environnement
  const replacements = [
    {
      pattern: /JWT_SECRET=your_jwt_secret_key_here_change_in_production/g,
      replacement: `JWT_SECRET=${jwtSecret}`,
      description: 'JWT_SECRET'
    },
    {
      pattern: /NEXTAUTH_SECRET=your-super-secret-key-change-in-production/g,
      replacement: `NEXTAUTH_SECRET=${nextAuthSecret}`,
      description: 'NEXTAUTH_SECRET'
    },
    {
      pattern: /NEXT_PUBLIC_BASE_URL=http:\/\/localhost:3000/g,
      replacement: `NEXT_PUBLIC_BASE_URL=${baseUrl}`,
      description: 'NEXT_PUBLIC_BASE_URL'
    },
    {
      pattern: /NEXTAUTH_URL=http:\/\/localhost:3000/g,
      replacement: `NEXTAUTH_URL=${baseUrl}`,
      description: 'NEXTAUTH_URL (eco-front)'
    },
    {
      pattern: /NEXTAUTH_URL=http:\/\/localhost:3001/g,
      replacement: `NEXTAUTH_URL=${baseUrl}/admin`,
      description: 'NEXTAUTH_URL (admin-dashboard)'
    }
  ];

  let changesCount = 0;
  replacements.forEach(({ pattern, replacement, description }) => {
    const matches = dockerComposeContent.match(pattern);
    if (matches) {
      dockerComposeContent = dockerComposeContent.replace(pattern, replacement);
      console.log(`   ‚úÖ ${description} mis √† jour (${matches.length} occurrence(s))`);
      changesCount += matches.length;
    }
  });

  if (changesCount === 0) {
    console.log('   ‚ÑπÔ∏è  Aucune configuration par d√©faut trouv√©e - d√©j√† configur√© ?');
  } else {
    // √âcrire le fichier modifi√©
    fs.writeFileSync(dockerComposePath, dockerComposeContent);
    console.log(`‚úÖ docker-compose.yml mis √† jour (${changesCount} changements)`);
  }

  // 4. Cr√©er/mettre √† jour .env.production
  console.log('\nüìÑ Cr√©ation du fichier .env.production...');
  
  const envProductionPath = path.join(process.cwd(), '.env.production');
  const envContent = `# Configuration de production - ${new Date().toISOString()}
# ‚ö†Ô∏è  NE PAS COMMITER CE FICHIER - CONTIENT DES SECRETS

NODE_ENV=production

# Base de donn√©es
DATABASE_URL="postgresql://eco_user:eco_password@postgres:5432/eco_database"
DIRECT_URL="postgresql://eco_user:eco_password@postgres:5432/eco_database"

# URLs
NEXT_PUBLIC_BASE_URL="${baseUrl}"
NEXTAUTH_URL="${baseUrl}"

# Secrets JWT
JWT_SECRET="${jwtSecret}"
NEXTAUTH_SECRET="${nextAuthSecret}"

# Stripe (√Ä CONFIGURER avec vos vraies cl√©s)
STRIPE_SECRET_KEY=sk_test_51Rd5XWRsmi4kGO8BgaHRoKPzPCbxJNg2YzWnq3rnU2x0v2rNpceut83k0fqRiMJhUSY7wk9VLeq3RgXAVRWR3yfj00sFAYxgAA
STRIPE_PUBLISHABLE_KEY=pk_test_51Rd5XWRsmi4kGO8BufaFcB2jcOUsQIjksZEsjCEbQVgKVeiasI9VBZJlReKzg72IWY1tisp1t7lcoY6uuTV0kqSj0070HpwprQ
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_51Rd5XWRsmi4kGO8BufaFcB2jcOUsQIjksZEsjCEbQVgKVeiasI9VBZJlReKzg72IWY1tisp1t7lcoY6uuTV0kqSj0070HpwprQ

# Email SMTP
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=flashtuto894@gmail.com
SMTP_PASS=zjtt lfqe npnf xbsh

# Google Maps
NEXT_PUBLIC_GOOGLE_MAPS_KEY="AIzaSyANYtALRlop0ARSz4HXv9XzR-CPRgJ4Vss"

# Prisma
PRISMA_STUDIO_URL="http://localhost:5555"
`;

  fs.writeFileSync(envProductionPath, envContent);
  console.log('‚úÖ .env.production cr√©√©');

  // 5. Mise √† jour de .gitignore pour les secrets
  console.log('\nüîí Mise √† jour de .gitignore...');
  
  const gitignorePath = path.join(process.cwd(), '.gitignore');
  if (fs.existsSync(gitignorePath)) {
    let gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    
    const secretsToIgnore = [
      '.env.production',
      'docker-compose.yml.backup-*',
      '*.backup-*'
    ];
    
    let gitignoreUpdated = false;
    secretsToIgnore.forEach(pattern => {
      if (!gitignoreContent.includes(pattern)) {
        gitignoreContent += `\n${pattern}`;
        gitignoreUpdated = true;
      }
    });
    
    if (gitignoreUpdated) {
      fs.writeFileSync(gitignorePath, gitignoreContent);
      console.log('‚úÖ .gitignore mis √† jour pour exclure les secrets');
    } else {
      console.log('‚úÖ .gitignore d√©j√† configur√©');
    }
  }

  // 6. Cr√©er un script de d√©marrage am√©lior√©
  console.log('\nüöÄ Cr√©ation du script de red√©ploiement...');
  
  const redeployScript = `#!/bin/bash

echo "üîÑ Red√©ploiement avec la nouvelle configuration..."

# Arr√™t des services
echo "‚èπÔ∏è  Arr√™t des services..."
docker-compose down

# Nettoyage des images obsol√®tes
echo "üßπ Nettoyage..."
docker system prune -f

# Reconstruction et d√©marrage
echo "üèóÔ∏è  Reconstruction des services..."
docker-compose up --build -d

# Attente de la base de donn√©es
echo "‚è≥ Attente de PostgreSQL..."
sleep 30

# V√©rification des services
echo "‚úÖ V√©rification des services..."
docker-compose ps

echo ""
echo "üéâ Red√©ploiement termin√© !"
echo "üìç Application disponible sur : ${baseUrl}"
echo "üìç Admin dashboard : ${baseUrl}/admin"
echo ""
echo "üîç Pour v√©rifier les logs :"
echo "   docker logs eco-front-app --tail=50"
echo "   docker logs eco-admin-dashboard --tail=50"
`;

  const redeployScriptPath = path.join(process.cwd(), 'redeploy-production.sh');
  fs.writeFileSync(redeployScriptPath, redeployScript);
  fs.chmodSync(redeployScriptPath, '755');
  console.log('‚úÖ Script redeploy-production.sh cr√©√©');

  // 7. R√©sum√© et prochaines √©tapes
  console.log('\nüéâ Configuration termin√©e !');
  console.log('==========================');
  console.log('');
  console.log('üìã R√©sum√© des changements :');
  console.log(`   ‚úÖ JWT_SECRET g√©n√©r√© et configur√©`);
  console.log(`   ‚úÖ NEXTAUTH_SECRET g√©n√©r√© et configur√©`);
  console.log(`   ‚úÖ URLs mises √† jour pour ${domain}`);
  console.log(`   ‚úÖ Fichier .env.production cr√©√©`);
  console.log(`   ‚úÖ Script de red√©ploiement cr√©√©`);
  console.log('');
  console.log('üöÄ Prochaines √©tapes :');
  console.log('   1. Configurez vos vraies cl√©s Stripe si n√©cessaire');
  console.log('   2. Lancez le red√©ploiement :');
  console.log('      ./redeploy-production.sh');
  console.log('');
  console.log('üîç D√©bogage si probl√®mes :');
  console.log('   node scripts/diagnose-production-errors.js');
  console.log('');
  console.log('‚ö†Ô∏è  IMPORTANT : Les secrets ont √©t√© g√©n√©r√©s automatiquement.');
  console.log('   Gardez une copie s√©curis√©e si vous devez les restaurer.');

  rl.close();
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur inattendue:', error.message);
  rl.close();
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\n\nüëã Configuration interrompue');
  rl.close();
  process.exit(0);
});

// D√©marrer la configuration
fixProductionConfig().catch(error => {
  console.error('‚ùå Erreur lors de la configuration:', error.message);
  rl.close();
  process.exit(1);
}); 