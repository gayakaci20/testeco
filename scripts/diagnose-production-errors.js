#!/usr/bin/env node

console.log('üîç Diagnostic des erreurs de production - API Services');
console.log('========================================================\n');

// 1. V√©rification des variables d'environnement
console.log('1Ô∏è‚É£ Variables d\'environnement :');
console.log('----------------------------');

const envVars = {
  'NODE_ENV': process.env.NODE_ENV,
  'DATABASE_URL': process.env.DATABASE_URL ? 
    `${process.env.DATABASE_URL.substring(0, 20)}...` : 'NON D√âFINIE',
  'JWT_SECRET': process.env.JWT_SECRET ? 
    (process.env.JWT_SECRET === 'your_jwt_secret_key_here_change_in_production' ? 
      '‚ùå VALEUR PAR D√âFAUT' : `‚úÖ D√©finie (${process.env.JWT_SECRET.length} chars)`) : 
    '‚ùå NON D√âFINIE',
  'NEXTAUTH_SECRET': process.env.NEXTAUTH_SECRET ? 
    (process.env.NEXTAUTH_SECRET === 'your-super-secret-key-change-in-production' ? 
      '‚ùå VALEUR PAR D√âFAUT' : '‚úÖ D√©finie') : 
    '‚ùå NON D√âFINIE',
  'NEXT_PUBLIC_BASE_URL': process.env.NEXT_PUBLIC_BASE_URL || '‚ùå NON D√âFINIE'
};

Object.entries(envVars).forEach(([key, value]) => {
  console.log(`   ${key}: ${value}`);
});

console.log('');

// 2. Test de connexion Prisma
console.log('2Ô∏è‚É£ Test de connexion Prisma :');
console.log('-----------------------------');

async function testPrismaConnection() {
  try {
    // Import dynamique pour √©viter les erreurs de module
    const { ensureConnected } = await import('../lib/prisma.js');
    const prisma = await ensureConnected();
    
    console.log('   ‚úÖ Import Prisma r√©ussi');
    
    // Test de requ√™te simple
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('   ‚úÖ Connexion base de donn√©es r√©ussie');
    console.log('   ‚úÖ Requ√™te test r√©ussie:', result);
    
    await prisma.$disconnect();
    console.log('   ‚úÖ D√©connexion r√©ussie');
    
  } catch (error) {
    console.log('   ‚ùå Erreur Prisma:', error.message);
    console.log('   üîß Stack trace:', error.stack);
  }
}

// 3. Test de v√©rification JWT
console.log('3Ô∏è‚É£ Test JWT :');
console.log('-------------');

async function testJWT() {
  try {
    const { verifyToken, generateToken } = await import('../lib/auth.js');
    
    // Test user mock
    const testUser = {
      id: 'test-id',
      email: 'test@example.com',
      role: 'PROVIDER',
      firstName: 'Test',
      lastName: 'User'
    };
    
    // G√©n√©rer un token
    const token = await generateToken(testUser);
    console.log('   ‚úÖ G√©n√©ration token r√©ussie');
    console.log('   üìù Token preview:', token.substring(0, 50) + '...');
    
    // V√©rifier le token
    const decoded = await verifyToken(token);
    console.log('   ‚úÖ V√©rification token r√©ussie');
    console.log('   üìù Decoded user:', decoded.email);
    
  } catch (error) {
    console.log('   ‚ùå Erreur JWT:', error.message);
    console.log('   üîß V√©rifiez JWT_SECRET dans les variables d\'environnement');
  }
}

// 4. Simulation de l'API services
console.log('4Ô∏è‚É£ Simulation API Services :');
console.log('-----------------------------');

async function simulateServicesAPI() {
  try {
    // Simuler une requ√™te POST comme dans le code original
    const mockReq = {
      method: 'POST',
      cookies: {},
      body: {
        name: 'Service Test',
        description: 'Test service',
        category: 'OTHER',
        price: 50,
        duration: 60,
        location: 'Test Location'
      }
    };
    
    console.log('   üß™ Simulation des √©tapes de l\'API...');
    
    // 1. Test connexion DB
    const { ensureConnected } = await import('../lib/prisma.js');
    await ensureConnected();
    console.log('   ‚úÖ √âtape 1: Connexion DB r√©ussie');
    
    // 2. Test verification token (sans token -> doit √©chouer avec 401)
    const { verifyToken } = await import('../lib/auth.js');
    const noToken = await verifyToken(null);
    console.log('   ‚úÖ √âtape 2: V√©rification token (sans token) - comportement attendu:', !noToken);
    
    // 3. Test avec token valide
    const { generateToken } = await import('../lib/auth.js');
    const testUser = {
      id: 'test-provider-id',
      email: 'provider@test.com',
      role: 'PROVIDER',
      firstName: 'Test',
      lastName: 'Provider'
    };
    
    const validToken = await generateToken(testUser);
    const decodedToken = await verifyToken(validToken);
    console.log('   ‚úÖ √âtape 3: Token valide d√©cod√© pour:', decodedToken.email);
    
    console.log('   ‚úÖ Simulation API compl√©t√©e - Aucun probl√®me d√©tect√© dans la logique');
    
  } catch (error) {
    console.log('   ‚ùå Erreur lors de la simulation:', error.message);
    console.log('   üìç Ceci est probablement la cause de l\'erreur 500');
    console.log('   üîß Stack trace:', error.stack);
  }
}

// 5. Recommandations de d√©bogage
function showDebuggingRecommendations() {
  console.log('5Ô∏è‚É£ Recommandations de d√©bogage :');
  console.log('--------------------------------');
  
  console.log('   üîß Pour r√©soudre les erreurs 500 en production :');
  console.log('');
  console.log('   1. Variables d\'environnement manquantes :');
  console.log('      - V√©rifiez que JWT_SECRET n\'est pas la valeur par d√©faut');
  console.log('      - Assurez-vous que DATABASE_URL pointe vers la bonne DB');
  console.log('      - Mettez √† jour NEXT_PUBLIC_BASE_URL avec votre domaine');
  console.log('');
  console.log('   2. Commandes de d√©bogage en production :');
  console.log('      docker logs eco-front-app --tail=100');
  console.log('      docker exec -it eco-front-app env | grep -E "(JWT|DATABASE|NEXT)"');
  console.log('');
  console.log('   3. Test manuel de l\'API :');
  console.log('      curl -X POST https://ecodeli.pro/api/services \\');
  console.log('           -H "Content-Type: application/json" \\');
  console.log('           -d \'{"name":"Test","price":10}\'');
  console.log('');
  console.log('   4. Mise √† jour des variables d\'environnement :');
  console.log('      - Modifiez docker-compose.yml avec les vraies valeurs');
  console.log('      - Relancez: docker-compose down && docker-compose up -d');
}

// Ex√©cution s√©quentielle des tests
async function runDiagnostics() {
  try {
    await testPrismaConnection();
    console.log('');
    
    await testJWT();
    console.log('');
    
    await simulateServicesAPI();
    console.log('');
    
    showDebuggingRecommendations();
    
  } catch (error) {
    console.log('‚ùå Erreur critique lors du diagnostic:', error.message);
    console.log('üîß V√©rifiez votre installation Node.js et les d√©pendances');
  }
}

// Lancer le diagnostic
runDiagnostics(); 