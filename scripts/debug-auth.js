/**
 * Authentication Debug Script
 * Run with: node scripts/debug-auth.js
 */

import { verifyToken, generateToken } from '../lib/auth.js';
import { JWT_SECRET } from '../lib/auth-constants.js';
import { prisma, ensureConnected } from '../lib/prisma.js';

console.log('üîç EcoDeli Authentication Debug Tool');
console.log('=====================================\n');

async function debugAuth() {
  try {
    // 1. Check environment variables
    console.log('1Ô∏è‚É£ Environment Variables Check:');
    console.log('   ‚úì NODE_ENV:', process.env.NODE_ENV || 'undefined');
    console.log('   ‚úì JWT_SECRET exists:', !!process.env.JWT_SECRET);
    console.log('   ‚úì JWT_SECRET length:', process.env.JWT_SECRET?.length || 0);
    console.log('   ‚úì JWT_SECRET preview:', process.env.JWT_SECRET?.substring(0, 10) + '...' || 'undefined');
    console.log('   ‚úì DATABASE_URL exists:', !!process.env.DATABASE_URL);
    console.log('   ‚úì NEXT_PUBLIC_BASE_URL:', process.env.NEXT_PUBLIC_BASE_URL || 'undefined');
    console.log('');

    // 2. Test database connection
    console.log('2Ô∏è‚É£ Database Connection Test:');
    try {
      await ensureConnected();
      const userCount = await prisma.user.count();
      console.log('   ‚úÖ Database connection: SUCCESS');
      console.log('   ‚úì Total users in database:', userCount);
    } catch (dbError) {
      console.log('   ‚ùå Database connection: FAILED');
      console.log('   ‚úó Error:', dbError.message);
      return;
    }
    console.log('');

    // 3. Test JWT token generation and verification
    console.log('3Ô∏è‚É£ JWT Token Test:');
    
    // Get a test user
    const testUser = await prisma.user.findFirst({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        userType: true
      }
    });

    if (!testUser) {
      console.log('   ‚ö†Ô∏è No users found in database for testing');
      console.log('   üí° Create a user first using the registration endpoint');
      return;
    }

    try {
      // Generate token
      const token = await generateToken(testUser);
      console.log('   ‚úÖ Token generation: SUCCESS');
      console.log('   ‚úì Token length:', token.length);
      console.log('   ‚úì Token format valid:', token.split('.').length === 3 ? 'YES' : 'NO');
      console.log('   ‚úì Token preview:', token.substring(0, 50) + '...');

      // Verify token
      const decoded = await verifyToken(token);
      console.log('   ‚úÖ Token verification: SUCCESS');
      console.log('   ‚úì Decoded user ID:', decoded.id);
      console.log('   ‚úì Decoded email:', decoded.email);
      console.log('   ‚úì Token matches user:', decoded.id === testUser.id ? 'YES' : 'NO');
    } catch (tokenError) {
      console.log('   ‚ùå JWT operations: FAILED');
      console.log('   ‚úó Error:', tokenError.message);
    }
    console.log('');

    // 4. Test CORS configuration
    console.log('4Ô∏è‚É£ CORS Configuration Check:');
    console.log('   ‚úì CORS headers will be set in API endpoints');
    console.log('   ‚úì Multiple cookie names supported (token, auth_token)');
    console.log('   ‚úì Authorization header fallback enabled');
    console.log('');

    // 5. Recommendations
    console.log('5Ô∏è‚É£ Troubleshooting Recommendations:');
    console.log('   üîß If 401 errors persist:');
    console.log('      - Check browser cookies in DevTools');
    console.log('      - Verify JWT_SECRET is consistent across environments');
    console.log('      - Clear all cookies and try fresh login');
    console.log('');
    console.log('   üîß If host validation errors persist:');
    console.log('      - Check Next.js allowedHosts configuration');
    console.log('      - Verify domain matches in nginx.conf');
    console.log('      - Check request origin headers');
    console.log('');
    console.log('   üîß If registration 500 errors persist:');
    console.log('      - Check database connection stability');
    console.log('      - Verify all required fields are provided');
    console.log('      - Check Prisma schema matches database');
    console.log('');

    console.log('‚úÖ Debug completed successfully!');

  } catch (error) {
    console.error('‚ùå Debug script error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the debug
debugAuth().catch(console.error); 