#!/usr/bin/env node

// Compatible version for older Node.js versions
const bcrypt = require('bcryptjs')

// Try to use @prisma/client directly instead of generated version
let PrismaClient;
try {
  PrismaClient = require('@prisma/client').PrismaClient;
} catch (error) {
  console.error('‚ùå Could not import @prisma/client. Please run: npm install @prisma/client');
  process.exit(1);
}

const prisma = new PrismaClient()

async function createAdminUser() {
  try {
    console.log('üîê Cr√©ation d\'un utilisateur administrateur...')
    
    const email = 'admin@ecodeli.com'
    const password = 'admin123!' // Changez ce mot de passe en production
    const firstName = 'Admin'
    const lastName = 'EcoDeli'
    
    // V√©rifier si l'admin existe d√©j√†
    const existingAdmin = await prisma.user.findUnique({
      where: { email: email }
    })
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Un utilisateur admin existe d√©j√† avec cet email')
      return
    }
    
    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 12)
    
    // Cr√©er l'utilisateur admin
    const admin = await prisma.user.create({
      data: {
        email: email,
        password: hashedPassword,
        firstName: firstName,
        lastName: lastName,
        role: 'ADMIN',
        userType: 'PROFESSIONAL',
        isVerified: true,
      }
    })
    
    console.log('‚úÖ Utilisateur administrateur cr√©√© avec succ√®s!')
    console.log('üìß Email:', email)
    console.log('üîë Mot de passe:', password)
    console.log('‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe apr√®s la premi√®re connexion!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdminUser() 