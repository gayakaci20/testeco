
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  image: 'image',
  phoneNumber: 'phoneNumber',
  address: 'address',
  role: 'role',
  isVerified: 'isVerified',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userType: 'userType',
  companyFirstName: 'companyFirstName',
  companyLastName: 'companyLastName',
  companyName: 'companyName',
  verificationToken: 'verificationToken',
  vehicle_type: 'vehicle_type'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  description: 'description',
  weight: 'weight',
  dimensions: 'dimensions',
  imageUrl: 'imageUrl',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  price: 'price',
  fragile: 'fragile',
  recipientAddress: 'recipientAddress',
  recipientName: 'recipientName',
  recipientPhone: 'recipientPhone',
  senderAddress: 'senderAddress',
  senderName: 'senderName',
  senderPhone: 'senderPhone',
  size: 'size',
  trackingNumber: 'trackingNumber',
  urgent: 'urgent',
  current_location: 'current_location',
  final_destination: 'final_destination',
  is_multi_segment: 'is_multi_segment',
  parent_package_id: 'parent_package_id',
  segment_number: 'segment_number',
  total_segments: 'total_segments'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  departureTime: 'departureTime',
  pricePerKg: 'pricePerKg',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  arrivalTime: 'arrivalTime',
  availableSpace: 'availableSpace',
  description: 'description',
  destination: 'destination',
  maxWeight: 'maxWeight',
  origin: 'origin',
  vehicleType: 'vehicleType',
  allows_relay_dropoff: 'allows_relay_dropoff',
  allows_relay_pickup: 'allows_relay_pickup'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  rideId: 'rideId',
  status: 'status',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  acceptedAt: 'acceptedAt',
  completedAt: 'completedAt',
  notes: 'notes',
  dropoff_location: 'dropoff_location',
  is_partial_delivery: 'is_partial_delivery',
  is_relay_segment: 'is_relay_segment',
  segment_order: 'segment_order'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isRead: 'isRead'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  matchId: 'matchId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  paymentIntentId: 'paymentIntentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refundAmount: 'refundAmount',
  refundReason: 'refundReason',
  completedAt: 'completedAt',
  metadata: 'metadata',
  orderId: 'orderId',
  stripeTransactionId: 'stripeTransactionId',
  ride_request_id: 'ride_request_id'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  relatedEntityId: 'relatedEntityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  data: 'data',
  isRead: 'isRead',
  title: 'title'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  description: 'description',
  category: 'category',
  price: 'price',
  duration: 'duration',
  isActive: 'isActive',
  location: 'location',
  requirements: 'requirements',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rating: 'rating',
  totalRatings: 'totalRatings'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  customerId: 'customerId',
  providerId: 'providerId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  totalAmount: 'totalAmount',
  status: 'status',
  notes: 'notes',
  address: 'address',
  rating: 'rating',
  review: 'review',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  merchantId: 'merchantId',
  title: 'title',
  content: 'content',
  terms: 'terms',
  status: 'status',
  signedAt: 'signedAt',
  expiresAt: 'expiresAt',
  value: 'value',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  carrierId: 'carrierId',
  endDate: 'endDate',
  startDate: 'startDate'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  description: 'description',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StorageBoxScalarFieldEnum = {
  id: 'id',
  code: 'code',
  location: 'location',
  size: 'size',
  isOccupied: 'isOccupied',
  isActive: 'isActive',
  pricePerDay: 'pricePerDay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.BoxRentalScalarFieldEnum = {
  id: 'id',
  boxId: 'boxId',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  totalCost: 'totalCost',
  accessCode: 'accessCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  merchantId: 'merchantId',
  packageId: 'packageId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  orderType: 'orderType',
  subtotal: 'subtotal',
  deliveryFee: 'deliveryFee',
  tax: 'tax',
  total: 'total',
  status: 'status',
  hasDelivery: 'hasDelivery',
  deliveryAddress: 'deliveryAddress',
  deliveryTimeSlot: 'deliveryTimeSlot',
  deliveryInstructions: 'deliveryInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmedAt: 'confirmedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productName: 'productName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  merchantId: 'merchantId',
  name: 'name',
  description: 'description',
  price: 'price',
  category: 'category',
  stock: 'stock',
  imageUrl: 'imageUrl',
  weight: 'weight',
  dimensions: 'dimensions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankingInfoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountHolder: 'accountHolder',
  iban: 'iban',
  bic: 'bic',
  bankName: 'bankName',
  address: 'address',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  canceledAt: 'canceledAt',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  stripePriceId: 'stripePriceId',
  amount: 'amount',
  currency: 'currency',
  isActive: 'isActive',
  autoRenew: 'autoRenew',
  trialEndsAt: 'trialEndsAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Carrier_reviewsScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  customer_id: 'customer_id',
  carrier_id: 'carrier_id',
  rating: 'rating',
  review: 'review',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConversationsScalarFieldEnum = {
  id: 'id',
  user1_id: 'user1_id',
  user2_id: 'user2_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ride_requestsScalarFieldEnum = {
  id: 'id',
  ride_id: 'ride_id',
  passenger_id: 'passenger_id',
  carrier_id: 'carrier_id',
  pickup_location: 'pickup_location',
  dropoff_location: 'dropoff_location',
  requested_seats: 'requested_seats',
  message: 'message',
  status: 'status',
  price: 'price',
  accepted_at: 'accepted_at',
  rejected_at: 'rejected_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tracking_eventsScalarFieldEnum = {
  id: 'id',
  package_id: 'package_id',
  carrier_id: 'carrier_id',
  status: 'status',
  location: 'location',
  notes: 'notes',
  lat: 'lat',
  lng: 'lng',
  timestamp: 'timestamp',
  created_at: 'created_at',
  updated_at: 'updated_at',
  event_type: 'event_type',
  next_carrier_id: 'next_carrier_id',
  transfer_code: 'transfer_code'
};

exports.Prisma.Transport_requestsScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  carrier_id: 'carrier_id',
  title: 'title',
  description: 'description',
  weight: 'weight',
  dimensions: 'dimensions',
  pickup_address: 'pickup_address',
  delivery_address: 'delivery_address',
  pickup_date: 'pickup_date',
  pickup_time: 'pickup_time',
  delivery_date: 'delivery_date',
  delivery_time: 'delivery_time',
  max_price: 'max_price',
  negotiated_price: 'negotiated_price',
  is_fragile: 'is_fragile',
  is_urgent: 'is_urgent',
  sender_name: 'sender_name',
  sender_phone: 'sender_phone',
  recipient_name: 'recipient_name',
  recipient_phone: 'recipient_phone',
  notes: 'notes',
  carrier_notes: 'carrier_notes',
  status: 'status',
  tracking_number: 'tracking_number',
  accepted_at: 'accepted_at',
  completed_at: 'completed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  CARRIER: 'CARRIER',
  MERCHANT: 'MERCHANT',
  PROVIDER: 'PROVIDER',
  SERVICE_PROVIDER: 'SERVICE_PROVIDER',
  ADMIN: 'ADMIN'
};

exports.UserType = exports.$Enums.UserType = {
  INDIVIDUAL: 'INDIVIDUAL',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.PackageStatus = exports.$Enums.PackageStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  AWAITING_RELAY: 'AWAITING_RELAY',
  RELAY_IN_PROGRESS: 'RELAY_IN_PROGRESS',
  ACCEPTED_BY_SENDER: 'ACCEPTED_BY_SENDER',
  ACCEPTED_BY_CARRIER: 'ACCEPTED_BY_CARRIER'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MatchStatus = exports.$Enums.MatchStatus = {
  PENDING: 'PENDING',
  ACCEPTED_BY_CARRIER: 'ACCEPTED_BY_CARRIER',
  ACCEPTED_BY_SENDER: 'ACCEPTED_BY_SENDER',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  AWAITING_TRANSFER: 'AWAITING_TRANSFER',
  READY_FOR_PICKUP: 'READY_FOR_PICKUP',
  PROPOSED: 'PROPOSED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PROCESSING: 'PROCESSING'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  PACKAGE_UPDATE: 'PACKAGE_UPDATE',
  RIDE_UPDATE: 'RIDE_UPDATE',
  MATCH_UPDATE: 'MATCH_UPDATE',
  PAYMENT_UPDATE: 'PAYMENT_UPDATE',
  GENERAL: 'GENERAL',
  PROMOTION: 'PROMOTION',
  SYSTEM: 'SYSTEM',
  TRANSPORT_REQUEST: 'TRANSPORT_REQUEST',
  TRANSPORT_REQUEST_ACCEPTED: 'TRANSPORT_REQUEST_ACCEPTED',
  TRANSPORT_IN_PROGRESS: 'TRANSPORT_IN_PROGRESS',
  TRANSPORT_COMPLETED: 'TRANSPORT_COMPLETED',
  PAYMENT_REQUIRED: 'PAYMENT_REQUIRED',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  MATCH_ACCEPTED: 'MATCH_ACCEPTED',
  BOOKING_CONFIRMED: 'BOOKING_CONFIRMED',
  RENTAL_CONFIRMED: 'RENTAL_CONFIRMED',
  DELIVERY_ACCEPTED: 'DELIVERY_ACCEPTED',
  DELIVERY_STARTED: 'DELIVERY_STARTED',
  DELIVERY_COMPLETED: 'DELIVERY_COMPLETED',
  RIDE_REQUEST: 'RIDE_REQUEST',
  RIDE_ACCEPTED: 'RIDE_ACCEPTED',
  RIDE_REJECTED: 'RIDE_REJECTED'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  CLEANING: 'CLEANING',
  MAINTENANCE: 'MAINTENANCE',
  DELIVERY: 'DELIVERY',
  PERSONAL_CARE: 'PERSONAL_CARE',
  TUTORING: 'TUTORING',
  CONSULTING: 'CONSULTING',
  OTHER: 'OTHER'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  SIGNED: 'SIGNED',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  PENDING_SIGNATURE: 'PENDING_SIGNATURE'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  INVOICE: 'INVOICE',
  CONTRACT: 'CONTRACT',
  RECEIPT: 'RECEIPT',
  DELIVERY_NOTE: 'DELIVERY_NOTE',
  CERTIFICATE: 'CERTIFICATE',
  OTHER: 'OTHER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  PROFESSIONAL: 'PROFESSIONAL',
  PREMIUM: 'PREMIUM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',
  TRIALING: 'TRIALING',
  PAUSED: 'PAUSED'
};

exports.RideRequestStatus = exports.$Enums.RideRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  PAID: 'PAID'
};

exports.TransportRequestStatus = exports.$Enums.TransportRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Package: 'Package',
  Ride: 'Ride',
  Match: 'Match',
  Message: 'Message',
  Payment: 'Payment',
  Notification: 'Notification',
  Service: 'Service',
  Booking: 'Booking',
  Contract: 'Contract',
  Document: 'Document',
  StorageBox: 'StorageBox',
  BoxRental: 'BoxRental',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Product: 'Product',
  BankingInfo: 'BankingInfo',
  Subscription: 'Subscription',
  carrier_reviews: 'carrier_reviews',
  conversations: 'conversations',
  ride_requests: 'ride_requests',
  tracking_events: 'tracking_events',
  transport_requests: 'transport_requests'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
