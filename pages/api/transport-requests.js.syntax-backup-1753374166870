import { prisma } from '../../lib/prisma';

export default async function handler(req, res) {
  try {
    // Ensure database connection is established
    await ensureConnected();
    console.log(`Handling ${req.method} request to /api/transport-requests`);
    
    if (req.method === 'GET') {
      try {
        console.log('Fetching transport requests');
        const { status, customerId, carrierId } = req.query;
        
        // Build where clause
        const where = {};
        
        if (status) {
          where.status = status;
        }
        
        if (customerId) {
          where.customerId = customerId;
        }
        
        if (carrierId) {
          where.carrierId = carrierId;
        }
        
        const requests = await prisma.transportRequest.findMany({
          where,
          include: {
            customer: {
              select: {
                id: true,
                name: true,
                firstName: true,
                lastName: true,
                email: true,
                phoneNumber: true,
              },
            },
            carrier: {
              select: {
                id: true,
                name: true,
                firstName: true,
                lastName: true,
                email: true,
                phoneNumber: true,
              },
            },
          },
          orderBy: {
            createdAt: 'desc',
          },
        });

        console.log(`Found ${requests.length} transport requests`);
        return res.status(200).json(requests);
      } catch (error) {
        console.error('Transport requests fetch error:', error);
        return res.status(500).json({ error: 'Failed to fetch transport requests', details: error.message });
      }
    }

    if (req.method === 'POST') {
      try {
        const data = req.body;
        console.log('Received transport request data:', JSON.stringify(data, null, 2));
        
        // Validate customer ID is provided
        if (!data.customerId) {
          console.error('Missing customerId in transport request creation');
          return res.status(400).json({ 
            error: 'customerId is required', 
            details: 'A valid customer ID must be provided'
          });
        }
        
        console.log(`Looking up customer with ID: ${data.customerId}`);
        // Validate that the customer exists
        try {
          const customerExists = await prisma.user.findUnique({
            where: { id: data.customerId, role: 'CUSTOMER' }
          });
          
          if (!customerExists) {
            console.error(`Customer with ID ${data.customerId} not found`);
            return res.status(400).json({ 
              error: 'Invalid customerId', 
              details: `No customer found with ID: ${data.customerId}`
            });
          }
          
          console.log(`Customer found: ${customerExists.email}`);
        } catch (customerLookupError) {
          console.error('Error looking up customer:', customerLookupError);
          return res.status(500).json({ 
            error: 'Customer lookup failed', 
            details: customerLookupError.message 
          });
        }

        // Generate a unique tracking number
        const trackingNumber = `TR-${Date.now()}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;

        // Prepare the data object
        const requestData = {
          customerId: data.customerId,
          title: data.title || 'Transport Request',
          description: data.description || null,
          weight: data.weight ? parseFloat(data.weight) : null,
          dimensions: data.dimensions || null,
          pickupAddress: data.pickupAddress || '',
          deliveryAddress: data.deliveryAddress || '',
          pickupDate: data.pickupDate ? new Date(data.pickupDate) : null,
          pickupTime: data.pickupTime || null,
          deliveryDate: data.deliveryDate ? new Date(data.deliveryDate) : null,
          deliveryTime: data.deliveryTime || null,
          maxPrice: data.maxPrice ? parseFloat(data.maxPrice) : null,
          isFragile: data.isFragile || false,
          isUrgent: data.isUrgent || false,
          senderName: data.senderName || null,
          senderPhone: data.senderPhone || null,
          recipientName: data.recipientName || null,
          recipientPhone: data.recipientPhone || null,
          notes: data.notes || null,
          status: 'PENDING',
          trackingNumber: trackingNumber,
        };
        
        console.log('Creating transport request with prepared data:', JSON.stringify(requestData, null, 2));

        // Create the transport request
        try {
          const newRequest = await prisma.transportRequest.create({
            data: requestData,
            include: {
              customer: {
                select: {
                  id: true,
                  name: true,
                  firstName: true,
                  lastName: true,
                  email: true,
                  phoneNumber: true,
                },
              },
            },
          });

          console.log('Transport request created successfully:', JSON.stringify(newRequest, null, 2));
          
          // Create a notification for all available carriers
          try {
            const carriers = await prisma.user.findMany({
              where: { role: 'CARRIER' }
            });
            
            const notifications = carriers.map(carrier => ({
              userId: carrier.id,
              type: 'TRANSPORT_REQUEST',
              title: 'Nouvelle demande de transport',
              message: `Une nouvelle demande de transport de ${data.pickupAddress} vers ${data.deliveryAddress} est disponible`,
              data: {
                requestId: newRequest.id,
                customerId: data.customerId,
                maxPrice: data.maxPrice,
                pickupAddress: data.pickupAddress,
                deliveryAddress: data.deliveryAddress,
              }
            }));
            
            await prisma.notification.createMany({
              data: notifications
            });
            
            console.log(`Created ${notifications.length} notifications for carriers`);
          } catch (notificationError) {
            console.error('Error creating notifications:', notificationError);
            // Continue even if notifications fail
          }

          return res.status(201).json(newRequest);
        } catch (createError) {
          console.error('Transport request creation database error:', createError);
          return res.status(500).json({ 
            error: 'Failed to create transport request in database', 
            details: createError.message
          });
        }
      } catch (processError) {
        console.error('Error processing transport request data:', processError);
        return res.status(500).json({ 
          error: 'Failed to process transport request data', 
          details: processError.message
        });
      }
    } else {
      return res.status(405).json({ error: 'Method not allowed' });
    }
  } catch (topLevelError) {
    console.error('Top-level error in transport-requests API:', topLevelError);
    return res.status(500).json({ 
      error: 'Internal server error', 
      details: topLevelError.message 
    });
  }
} 